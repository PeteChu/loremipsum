{"version":3,"sources":["components/LoremIpsum.js","App.js","serviceWorker.js","index.js"],"names":["LoremIpsum","props","copyToClipboard","bind","numberOfParagraph","lorem","LI","sentencesPerParagraph","max","min","wordsPerSentence","Array","keys","map","n","generateParagraphs","copyText","document","getElementById","textContent","textArea","createElement","setAttribute","value","body","appendChild","select","execCommand","className","id","ref","this","type","onClick","loremIpsum","Component","App","state","inputHandle","event","re","RegExp","isNumber","target","match","setState","parseInt","onChange","React","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAwDeA,G,kBAnDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAFN,E,wEAKRC,GACT,IAAMC,EAAQ,IAAIC,aAChB,CACEC,sBAAuB,CACrBC,IAAK,EACLC,IAAK,GAEPC,iBAAkB,CAChBF,IAAK,GACLC,IAAK,IAGT,QACA,MAKF,OAHmB,YAAIE,MAAMP,GAAmBQ,QAAQC,KACtD,SAAAC,GAAC,MAAI,KAAOT,EAAMU,mBAAmB,GAAK,Y,wCAM5C,IAAMC,EAAWC,SAASC,eAAe,SAASC,YAC5CC,EAAWH,SAASI,cAAc,YACxCD,EAASE,aAAa,OAAQ,UAC9BF,EAASG,MAAQP,EACjBC,SAASO,KAAKC,YAAYL,GAC1BA,EAASM,SACTT,SAASU,YAAY,U,+BAIrB,OACE,yBAAKC,UAAU,eAAeC,GAAG,QAAQC,IAAKC,KAAKX,UACjD,2BACEY,KAAK,SACLT,MAAM,OACNU,QAASF,KAAK7B,gBACd2B,GAAG,oBAEJE,KAAKG,WAAWH,KAAK9B,MAAMG,wB,GA9CX+B,cCoCVC,G,kBAnCb,WAAYnC,GAAQ,IAAD,8BACjB,4CAAMA,KACDoC,MAAQ,CACXjC,kBAAmB,GAErB,EAAKkC,YAAc,EAAKA,YAAYnC,KAAjB,gBALF,E,yEAQPoC,GACV,IACMC,EAAK,IAAIC,OADC,SAEVC,EAAWH,EAAMI,OAAOpB,MAAMqB,MAAMJ,GAE1CT,KAAKc,SAAS,CACZzC,kBACEmC,EAAMI,OAAOpB,OAAS,GAAKmB,EAAWI,SAASP,EAAMI,OAAOpB,OAAS,M,+BAKzE,OACE,yBAAKK,UAAU,OACb,wBAAIA,UAAU,SAAd,eACA,2BACEA,UAAU,aACVI,KAAK,SACLe,SAAUhB,KAAKO,YACff,MAAOQ,KAAKM,MAAMjC,oBAEpB,kBAAC,EAAD,CAAYA,kBAAmB2B,KAAKM,MAAMjC,yB,GA9BhC4C,IAAMb,YCQJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCZNS,IAASC,OAAO,kBAAC,EAAD,MAASrC,SAASC,eAAe,SD2H3C,kBAAmBqC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.773402bf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { LoremIpsum as LI } from \"lorem-ipsum\";\nimport \"../css/LoremIpsum.css\";\n\nclass LoremIpsum extends Component {\n  constructor(props) {\n    super(props);\n    this.copyToClipboard = this.copyToClipboard.bind(this);\n  }\n\n  loremIpsum(numberOfParagraph) {\n    const lorem = new LI(\n      {\n        sentencesPerParagraph: {\n          max: 8,\n          min: 4\n        },\n        wordsPerSentence: {\n          max: 16,\n          min: 4\n        }\n      },\n      \"plain\",\n      \"\\n\"\n    );\n    const paragraphs = [...Array(numberOfParagraph).keys()].map(\n      n => \"\\t\" + lorem.generateParagraphs(1) + \"\\n\\n\"\n    );\n    return paragraphs;\n  }\n\n  copyToClipboard() {\n    const copyText = document.getElementById(\"lorem\").textContent;\n    const textArea = document.createElement(\"textarea\");\n    textArea.setAttribute(\"type\", \"hidden\");\n    textArea.value = copyText;\n    document.body.appendChild(textArea);\n    textArea.select();\n    document.execCommand(\"copy\");\n  }\n\n  render() {\n    return (\n      <div className=\"lorem scroll\" id=\"lorem\" ref={this.textArea}>\n        <input\n          type=\"button\"\n          value=\"copy\"\n          onClick={this.copyToClipboard}\n          id=\"copyToClipboard\"\n        />\n        {this.loremIpsum(this.props.numberOfParagraph)}\n      </div>\n    );\n  }\n}\n\nexport default LoremIpsum;\n","import React from \"react\";\nimport LoremIpsum from \"./components/LoremIpsum\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfParagraph: 0\n    };\n    this.inputHandle = this.inputHandle.bind(this);\n  }\n\n  inputHandle(event) {\n    const pattern = \"[0-9]\";\n    const re = new RegExp(pattern);\n    const isNumber = event.target.value.match(re);\n\n    this.setState({\n      numberOfParagraph:\n        event.target.value > -1 && isNumber ? parseInt(event.target.value) : 0\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Lorem Ipsum</h1>\n        <input\n          className=\"loremInput\"\n          type=\"number\"\n          onChange={this.inputHandle}\n          value={this.state.numberOfParagraph}\n        />\n        <LoremIpsum numberOfParagraph={this.state.numberOfParagraph} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}